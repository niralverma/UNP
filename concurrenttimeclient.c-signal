#include<stdio.h>
#include<sys/socket.h>
#include<string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include<stdlib.h>
#include<signal.h>
//signal(int sig,function_handler)
//
//SIGINT: interrupt
//SIGCHLD: child termination
//SIGABRT: abnormal termination
//SIGFPE: floating point exception
//SIGTERM: termination request sent to program
//SIGKILL: to kill a process
//SIGSTOP: stop a process 
//
//function:
//SIG_IGN: ignore
//SIG_DFL: default - let the kernel decide whether to terminate or not
//
int net_socket;

void handle_sigint(int sig)
{
printf("The client program is exiting ...\n");
close(net_socket);
exit(0);
}

int main(int argc, char *argv[])
{

        signal(SIGINT,handle_sigint);
    //create a socket
    //int net_socket;
    net_socket = socket(AF_INET, SOCK_STREAM, 0);

    //connect to a server
    //where we want to connect to
    struct sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(atoi(argv[2]));
    server_address.sin_addr.s_addr = inet_addr(argv[1]);

    connect( net_socket, ( struct sockaddr * ) &server_address, sizeof( server_address));
//recv data
char data[201];
int n;

while(1){
    printf("\nEnter:");
    scanf("%s",data);

      write(net_socket,data, strlen(data));

      n=recv(net_socket, data,200,0);

      data[n]='\0';
      printf("%s\n",data);

}

    close(net_socket);

    return(0);
}

